/*
 * Copyright (c) 2011-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
description = 'Reactor Data components'

ext {
	gradleVersion = '1.5'
	gradleScriptDir = "${rootProject.projectDir}/gradle"

	// Languages
	groovyVersion = '2.1.3'

	// Logging
	slf4jVersion = '1.7.5'
	logbackVersion = '1.0.11'

  // Spring
  springVersion = '4.0.0.BUILD-SNAPSHOT'
  sdCommonsVersion = "1.6.0.BUILD-SNAPSHOT"
  sdMongoVersion = "1.3.0.BUILD-SNAPSHOT"
  
  // Riak
  riakClientVersion = '1.1.0'
  
	// Testing
	spockVersion = '0.7-groovy-2.0'
}

apply from: "$gradleScriptDir/setup.gradle"

allprojects {
	apply plugin: 'idea'
	apply plugin: 'eclipse'

	configurations.all {
		exclude group: "commons-logging"
		exclude module: "junit"
	}

	group = 'reactor.data'
	repositories {
		mavenLocal()
		maven { url 'http://repo.springsource.org/libs-release' }
		maven { url 'http://repo.springsource.org/libs-snapshot' }
		mavenCentral()
	}
}

subprojects { subproject ->
	apply plugin: 'java'
	apply plugin: 'groovy'

	sourceCompatibility = 8
	targetCompatibility = 8

	[compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:none", "-g"]

	/* compileGroovy {
			 options.useAnt = true
			 groovyOptions.useAnt = true
			 groovyOptions.metaClass.optionMap = {
					 [
									 memoryMaximumSize: '384m',
									 fork: true,
									 includeJavaRuntime: false,
									 verbose: false,
									 encoding: 'UTF-8',
									 failonerror: true,
									 stacktrace: false,
									 listfiles: false
					 ]
			 }
	 }*/

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task groovydocJar(type: Jar) {
		classifier = 'groovydoc'
		from groovydoc
	}

	artifacts {
		archives sourcesJar
		archives groovydocJar
	}

	// dependencies that are common across all java projects
	dependencies {
		// Logging
		compile "org.slf4j:slf4j-api:$slf4jVersion"

		// JSR-305 annotations
		compile("com.google.code.findbugs:jsr305:2.0.0", optional)

		// Groovy
		testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"

		// Testing
		testCompile "org.hamcrest:hamcrest-library:1.3"
		testCompile "org.spockframework:spock-core:$spockVersion"
		testRuntime "ch.qos.logback:logback-classic:$logbackVersion"
	}
}

project('data-core') {
	description = 'Core Reactor components for working with datastores'
	dependencies {
		compile "reactor:reactor-core:1.0.0.BUILD-SNAPSHOT"
	}
}

project('data-spring') {
	description = 'Reactor components for working with Spring Data Repositories'
	dependencies {
		compile project(':data-core')

    // Spring
    compile("org.springframework:spring-beans:$springVersion") { force = true }
    compile("org.springframework:spring-context:$springVersion") { force = true }
    compile("org.springframework:spring-context-support:$springVersion") { force = true }
    compile("org.springframework:spring-core:$springVersion") { force = true }
    compile("org.springframework:spring-expression:$springVersion") { force = true }
    compile("org.springframework:spring-tx:$springVersion") { force = true }
    
    // Spring Data
    compile "org.springframework.data:spring-data-mongodb:$sdMongoVersion"
    
    // Testing
    testRuntime "org.slf4j:jcl-over-slf4j:$slf4jVersion"
	}
}

project('data-riak') {
  description = 'Reactor components for working with Riak'
  dependencies {
    compile project(':data-core')
    
    // Riak
    compile "com.basho.riak:riak-client:$riakClientVersion"
  }
}

